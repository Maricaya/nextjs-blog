Index: dist/migration/1592205680555-CreatePosts.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/migration/1592205680555-CreatePosts.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ dist/migration/1592205680555-CreatePosts.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,103 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.CreatePosts1592205680555 = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
+
+var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
+
+var _typeorm = require("typeorm");
+
+var CreatePosts1592205680555 = /*#__PURE__*/function () {
+  function CreatePosts1592205680555() {
+    (0, _classCallCheck2["default"])(this, CreatePosts1592205680555);
+  }
+
+  (0, _createClass2["default"])(CreatePosts1592205680555, [{
+    key: "up",
+    value: function () {
+      var _up = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(queryRunner) {
+        return _regenerator["default"].wrap(function _callee$(_context) {
+          while (1) {
+            switch (_context.prev = _context.next) {
+              case 0:
+                _context.next = 2;
+                return queryRunner.createTable(new _typeorm.Table({
+                  name: 'posts',
+                  columns: [{
+                    name: 'id',
+                    isGenerated: true,
+                    type: 'int',
+                    generationStrategy: 'increment',
+                    isPrimary: true
+                  }, {
+                    name: 'title',
+                    type: 'varchar'
+                  }, {
+                    name: 'content',
+                    type: 'text'
+                  }, {
+                    name: 'author_id',
+                    type: 'int'
+                  }]
+                }));
+
+              case 2:
+                return _context.abrupt("return", _context.sent);
+
+              case 3:
+              case "end":
+                return _context.stop();
+            }
+          }
+        }, _callee);
+      }));
+
+      function up(_x) {
+        return _up.apply(this, arguments);
+      }
+
+      return up;
+    }()
+  }, {
+    key: "down",
+    value: function () {
+      var _down = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(queryRunner) {
+        return _regenerator["default"].wrap(function _callee2$(_context2) {
+          while (1) {
+            switch (_context2.prev = _context2.next) {
+              case 0:
+                _context2.next = 2;
+                return queryRunner.dropTable('posts');
+
+              case 2:
+                return _context2.abrupt("return", _context2.sent);
+
+              case 3:
+              case "end":
+                return _context2.stop();
+            }
+          }
+        }, _callee2);
+      }));
+
+      function down(_x2) {
+        return _down.apply(this, arguments);
+      }
+
+      return down;
+    }()
+  }]);
+  return CreatePosts1592205680555;
+}();
+
+exports.CreatePosts1592205680555 = CreatePosts1592205680555;
\ No newline at end of file
Index: dist/migration/1592206097026-CreateComments.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/migration/1592206097026-CreateComments.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ dist/migration/1592206097026-CreateComments.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,103 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.CreateComments1592206097026 = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
+
+var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
+
+var _typeorm = require("typeorm");
+
+var CreateComments1592206097026 = /*#__PURE__*/function () {
+  function CreateComments1592206097026() {
+    (0, _classCallCheck2["default"])(this, CreateComments1592206097026);
+  }
+
+  (0, _createClass2["default"])(CreateComments1592206097026, [{
+    key: "up",
+    value: function () {
+      var _up = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(queryRunner) {
+        return _regenerator["default"].wrap(function _callee$(_context) {
+          while (1) {
+            switch (_context.prev = _context.next) {
+              case 0:
+                _context.next = 2;
+                return queryRunner.createTable(new _typeorm.Table({
+                  name: 'comments',
+                  columns: [{
+                    name: 'id',
+                    isGenerated: true,
+                    type: 'int',
+                    generationStrategy: 'increment',
+                    isPrimary: true
+                  }, {
+                    name: 'user_id',
+                    type: 'int'
+                  }, {
+                    name: 'post_id',
+                    type: 'int'
+                  }, {
+                    name: 'content',
+                    type: 'text'
+                  }]
+                }));
+
+              case 2:
+                return _context.abrupt("return", _context.sent);
+
+              case 3:
+              case "end":
+                return _context.stop();
+            }
+          }
+        }, _callee);
+      }));
+
+      function up(_x) {
+        return _up.apply(this, arguments);
+      }
+
+      return up;
+    }()
+  }, {
+    key: "down",
+    value: function () {
+      var _down = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(queryRunner) {
+        return _regenerator["default"].wrap(function _callee2$(_context2) {
+          while (1) {
+            switch (_context2.prev = _context2.next) {
+              case 0:
+                _context2.next = 2;
+                return queryRunner.dropTable('comments');
+
+              case 2:
+                return _context2.abrupt("return", _context2.sent);
+
+              case 3:
+              case "end":
+                return _context2.stop();
+            }
+          }
+        }, _callee2);
+      }));
+
+      function down(_x2) {
+        return _down.apply(this, arguments);
+      }
+
+      return down;
+    }()
+  }]);
+  return CreateComments1592206097026;
+}();
+
+exports.CreateComments1592206097026 = CreateComments1592206097026;
\ No newline at end of file
Index: dist/migration/1592206406201-AddCreatedAtAndUpdateAt.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/migration/1592206406201-AddCreatedAtAndUpdateAt.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ dist/migration/1592206406201-AddCreatedAtAndUpdateAt.js	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,146 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.AddCreatedAtAndUpdateAt1592206406201 = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
+
+var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
+
+var _typeorm = require("typeorm");
+
+var AddCreatedAtAndUpdateAt1592206406201 = /*#__PURE__*/function () {
+  function AddCreatedAtAndUpdateAt1592206406201() {
+    (0, _classCallCheck2["default"])(this, AddCreatedAtAndUpdateAt1592206406201);
+  }
+
+  (0, _createClass2["default"])(AddCreatedAtAndUpdateAt1592206406201, [{
+    key: "up",
+    value: function () {
+      var _up = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(queryRunner) {
+        return _regenerator["default"].wrap(function _callee$(_context) {
+          while (1) {
+            switch (_context.prev = _context.next) {
+              case 0:
+                _context.next = 2;
+                return queryRunner.addColumns('users', [new _typeorm.TableColumn({
+                  name: 'createdAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                }), new _typeorm.TableColumn({
+                  name: 'updateAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                })]);
+
+              case 2:
+                _context.next = 4;
+                return queryRunner.addColumns('posts', [new _typeorm.TableColumn({
+                  name: 'createdAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                }), new _typeorm.TableColumn({
+                  name: 'updateAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                })]);
+
+              case 4:
+                _context.next = 6;
+                return queryRunner.addColumns('comments', [new _typeorm.TableColumn({
+                  name: 'createdAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                }), new _typeorm.TableColumn({
+                  name: 'updateAt',
+                  type: 'time',
+                  isNullable: false,
+                  "default": 'now()'
+                })]);
+
+              case 6:
+              case "end":
+                return _context.stop();
+            }
+          }
+        }, _callee);
+      }));
+
+      function up(_x) {
+        return _up.apply(this, arguments);
+      }
+
+      return up;
+    }()
+  }, {
+    key: "down",
+    value: function () {
+      var _down = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(queryRunner) {
+        return _regenerator["default"].wrap(function _callee2$(_context2) {
+          while (1) {
+            switch (_context2.prev = _context2.next) {
+              case 0:
+                _context2.prev = 0;
+                _context2.next = 3;
+                return queryRunner.dropColumn('users', 'createdAt');
+
+              case 3:
+                _context2.next = 5;
+                return queryRunner.dropColumn('users', 'updateAt');
+
+              case 5:
+                _context2.next = 7;
+                return queryRunner.dropColumn('posts', 'createdAt');
+
+              case 7:
+                _context2.next = 9;
+                return queryRunner.dropColumn('posts', 'updateAt');
+
+              case 9:
+                _context2.next = 11;
+                return queryRunner.dropColumn('comments', 'createdAt');
+
+              case 11:
+                _context2.next = 13;
+                return queryRunner.dropColumn('comments', 'updateAt');
+
+              case 13:
+                _context2.next = 17;
+                break;
+
+              case 15:
+                _context2.prev = 15;
+                _context2.t0 = _context2["catch"](0);
+
+              case 17:
+              case "end":
+                return _context2.stop();
+            }
+          }
+        }, _callee2, null, [[0, 15]]);
+      }));
+
+      function down(_x2) {
+        return _down.apply(this, arguments);
+      }
+
+      return down;
+    }()
+  }]);
+  return AddCreatedAtAndUpdateAt1592206406201;
+}();
+
+exports.AddCreatedAtAndUpdateAt1592206406201 = AddCreatedAtAndUpdateAt1592206406201;
\ No newline at end of file
Index: src/migration/1592205680555-CreatePosts.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/migration/1592205680555-CreatePosts.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ src/migration/1592205680555-CreatePosts.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,21 @@
+import {MigrationInterface, QueryRunner, Table} from "typeorm";
+
+export class CreatePosts1592205680555 implements MigrationInterface {
+
+    public async up(queryRunner: QueryRunner): Promise<void> {
+        return await queryRunner.createTable(new Table({
+            name: 'posts',
+            columns: [
+                {name: 'id', isGenerated: true, type: 'int', generationStrategy: 'increment', isPrimary: true},
+                {name: 'title', type: 'varchar'},
+                {name: 'content', type: 'text'},
+                {name: 'author_id', type: 'int'}
+            ]
+        }))
+    }
+
+    public async down(queryRunner: QueryRunner): Promise<void> {
+        return await queryRunner.dropTable('posts');
+    }
+
+}
Index: src/migration/1592206097026-CreateComments.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/migration/1592206097026-CreateComments.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ src/migration/1592206097026-CreateComments.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,21 @@
+import {MigrationInterface, QueryRunner, Table} from "typeorm";
+
+export class CreateComments1592206097026 implements MigrationInterface {
+
+    public async up(queryRunner: QueryRunner): Promise<void> {
+        return await queryRunner.createTable(new Table({
+            name: 'comments',
+            columns: [
+                {name: 'id', isGenerated: true, type: 'int', generationStrategy: 'increment', isPrimary: true},
+                {name: 'user_id', type: 'int'},
+                {name: 'post_id', type: 'int'},
+                {name: 'content', type: 'text'}
+            ]
+        }))
+    }
+
+    public async down(queryRunner: QueryRunner): Promise<void> {
+        return await queryRunner.dropTable('comments');
+    }
+
+}
Index: src/migration/1592206406201-AddCreatedAtAndUpdateAt.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/migration/1592206406201-AddCreatedAtAndUpdateAt.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
+++ src/migration/1592206406201-AddCreatedAtAndUpdateAt.ts	(revision 1aca6350c4f8bd35e2bd547b2664b39d6d570f27)
@@ -0,0 +1,34 @@
+import {MigrationInterface, QueryRunner, TableColumn} from "typeorm";
+
+export class AddCreatedAtAndUpdateAt1592206406201 implements MigrationInterface {
+
+    public async up(queryRunner: QueryRunner): Promise<void> {
+        await queryRunner.addColumns('users', [
+            new TableColumn({name: 'createdAt', type: 'time', isNullable: false, default: 'now()'}),
+            new TableColumn({name: 'updateAt', type: 'time', isNullable: false, default: 'now()'})
+        ]);
+        await queryRunner.addColumns('posts', [
+            new TableColumn({name: 'createdAt', type: 'time', isNullable: false, default: 'now()'}),
+            new TableColumn({name: 'updateAt', type: 'time', isNullable: false, default: 'now()'})
+        ]);
+        await queryRunner.addColumns('comments', [
+            new TableColumn({name: 'createdAt', type: 'time', isNullable: false, default: 'now()'}),
+            new TableColumn({name: 'updateAt', type: 'time', isNullable: false, default: 'now()'})
+        ])
+    }
+
+    public async down(queryRunner: QueryRunner): Promise<void> {
+        try {
+            await queryRunner.dropColumn('users', 'createdAt');
+            await queryRunner.dropColumn('users', 'updateAt');
+            await queryRunner.dropColumn('posts', 'createdAt');
+            await queryRunner.dropColumn('posts', 'updateAt');
+            await queryRunner.dropColumn('comments', 'createdAt');
+            await queryRunner.dropColumn('comments', 'updateAt');
+        }
+        catch (error) {
+
+        }
+    }
+
+}
Index: dist/migration/1592201997493-CreateUsers.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- dist/migration/1592201997493-CreateUsers.js	(date 1592205639000)
+++ dist/migration/1592201997493-CreateUsers.js	(date 1592207305000)
@@ -30,7 +30,8 @@
           while (1) {
             switch (_context.prev = _context.next) {
               case 0:
-                queryRunner.createTable(new _typeorm.Table({
+                _context.next = 2;
+                return queryRunner.createTable(new _typeorm.Table({
                   name: 'users',
                   columns: [{
                     name: 'id',
@@ -47,7 +48,10 @@
                   }]
                 }));
 
-              case 1:
+              case 2:
+                return _context.abrupt("return", _context.sent);
+
+              case 3:
               case "end":
                 return _context.stop();
             }
@@ -69,9 +73,13 @@
           while (1) {
             switch (_context2.prev = _context2.next) {
               case 0:
-                queryRunner.dropTable('users');
+                _context2.next = 2;
+                return queryRunner.dropTable('users');
 
-              case 1:
+              case 2:
+                return _context2.abrupt("return", _context2.sent);
+
+              case 3:
               case "end":
                 return _context2.stop();
             }
Index: src/migration/1592201997493-CreateUsers.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/migration/1592201997493-CreateUsers.ts	(date 1592205639000)
+++ src/migration/1592201997493-CreateUsers.ts	(date 1592207305000)
@@ -3,7 +3,7 @@
 export class CreateUsers1592201997493 implements MigrationInterface {
 
     public async up(queryRunner: QueryRunner): Promise<void> {
-        queryRunner.createTable(new Table({
+        return await queryRunner.createTable(new Table({
             name: 'users',
             columns: [
                 {name: 'id', isGenerated: true, type: 'int', generationStrategy: 'increment', isPrimary: true},
@@ -14,7 +14,7 @@
     }
 
     public async down(queryRunner: QueryRunner): Promise<void> {
-        queryRunner.dropTable('users');
+        return await queryRunner.dropTable('users');
     }
 
 }
